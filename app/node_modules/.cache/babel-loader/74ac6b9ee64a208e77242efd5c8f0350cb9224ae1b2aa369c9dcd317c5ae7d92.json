{"ast":null,"code":"const util = require(\"./util\");\nconst nacl = require(\"tweetnacl\");\nconst naclUtil = require(\"tweetnacl-util\");\nfunction encrypt(pusher, channel, data) {\n  if (pusher.config.encryptionMasterKey === undefined) {\n    throw new Error(\"Set encryptionMasterKey before triggering events on encrypted channels\");\n  }\n  const nonceBytes = nacl.randomBytes(24);\n  const ciphertextBytes = nacl.secretbox(naclUtil.decodeUTF8(JSON.stringify(data)), nonceBytes, pusher.channelSharedSecret(channel));\n  return JSON.stringify({\n    nonce: naclUtil.encodeBase64(nonceBytes),\n    ciphertext: naclUtil.encodeBase64(ciphertextBytes)\n  });\n}\nexports.trigger = function (pusher, channels, eventName, data, params) {\n  if (channels.length === 1 && util.isEncryptedChannel(channels[0])) {\n    const channel = channels[0];\n    const event = {\n      name: eventName,\n      data: encrypt(pusher, channel, data),\n      channels: [channel],\n      ...params\n    };\n    return pusher.post({\n      path: \"/events\",\n      body: event\n    });\n  } else {\n    for (let i = 0; i < channels.length; i++) {\n      if (util.isEncryptedChannel(channels[i])) {\n        // For rationale, see limitations of end-to-end encryption in the README\n        throw new Error(\"You cannot trigger to multiple channels when using encrypted channels\");\n      }\n    }\n    const event = {\n      name: eventName,\n      data: ensureJSON(data),\n      channels: channels,\n      ...params\n    };\n    return pusher.post({\n      path: \"/events\",\n      body: event\n    });\n  }\n};\nexports.triggerBatch = function (pusher, batch) {\n  for (let i = 0; i < batch.length; i++) {\n    batch[i].data = util.isEncryptedChannel(batch[i].channel) ? encrypt(pusher, batch[i].channel, batch[i].data) : ensureJSON(batch[i].data);\n  }\n  return pusher.post({\n    path: \"/batch_events\",\n    body: {\n      batch: batch\n    }\n  });\n};\nfunction ensureJSON(data) {\n  return typeof data === \"string\" ? data : JSON.stringify(data);\n}","map":{"version":3,"names":["util","require","nacl","naclUtil","encrypt","pusher","channel","data","config","encryptionMasterKey","undefined","Error","nonceBytes","randomBytes","ciphertextBytes","secretbox","decodeUTF8","JSON","stringify","channelSharedSecret","nonce","encodeBase64","ciphertext","exports","trigger","channels","eventName","params","length","isEncryptedChannel","event","name","post","path","body","i","ensureJSON","triggerBatch","batch"],"sources":["/workspace/messaging-app/app/node_modules/pusher/lib/events.js"],"sourcesContent":["const util = require(\"./util\")\nconst nacl = require(\"tweetnacl\")\nconst naclUtil = require(\"tweetnacl-util\")\n\nfunction encrypt(pusher, channel, data) {\n  if (pusher.config.encryptionMasterKey === undefined) {\n    throw new Error(\n      \"Set encryptionMasterKey before triggering events on encrypted channels\"\n    )\n  }\n\n  const nonceBytes = nacl.randomBytes(24)\n\n  const ciphertextBytes = nacl.secretbox(\n    naclUtil.decodeUTF8(JSON.stringify(data)),\n    nonceBytes,\n    pusher.channelSharedSecret(channel)\n  )\n\n  return JSON.stringify({\n    nonce: naclUtil.encodeBase64(nonceBytes),\n    ciphertext: naclUtil.encodeBase64(ciphertextBytes),\n  })\n}\n\nexports.trigger = function (pusher, channels, eventName, data, params) {\n  if (channels.length === 1 && util.isEncryptedChannel(channels[0])) {\n    const channel = channels[0]\n    const event = {\n      name: eventName,\n      data: encrypt(pusher, channel, data),\n      channels: [channel],\n      ...params,\n    }\n    return pusher.post({ path: \"/events\", body: event })\n  } else {\n    for (let i = 0; i < channels.length; i++) {\n      if (util.isEncryptedChannel(channels[i])) {\n        // For rationale, see limitations of end-to-end encryption in the README\n        throw new Error(\n          \"You cannot trigger to multiple channels when using encrypted channels\"\n        )\n      }\n    }\n\n    const event = {\n      name: eventName,\n      data: ensureJSON(data),\n      channels: channels,\n      ...params,\n    }\n    return pusher.post({ path: \"/events\", body: event })\n  }\n}\n\nexports.triggerBatch = function (pusher, batch) {\n  for (let i = 0; i < batch.length; i++) {\n    batch[i].data = util.isEncryptedChannel(batch[i].channel)\n      ? encrypt(pusher, batch[i].channel, batch[i].data)\n      : ensureJSON(batch[i].data)\n  }\n  return pusher.post({ path: \"/batch_events\", body: { batch: batch } })\n}\n\nfunction ensureJSON(data) {\n  return typeof data === \"string\" ? data : JSON.stringify(data)\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}