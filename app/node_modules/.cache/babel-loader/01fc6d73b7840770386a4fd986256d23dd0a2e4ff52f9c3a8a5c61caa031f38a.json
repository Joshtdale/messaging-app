{"ast":null,"code":"const util = require(\"./util\");\nfunction getSocketSignatureForUser(token, socketId, userData) {\n  const serializedUserData = JSON.stringify(userData);\n  const signature = token.sign(`${socketId}::user::${serializedUserData}`);\n  return {\n    auth: `${token.key}:${signature}`,\n    user_data: serializedUserData\n  };\n}\nfunction getSocketSignature(pusher, token, channel, socketID, data) {\n  const result = {};\n  const signatureData = [socketID, channel];\n  if (data) {\n    const serializedData = JSON.stringify(data);\n    signatureData.push(serializedData);\n    result.channel_data = serializedData;\n  }\n  result.auth = token.key + \":\" + token.sign(signatureData.join(\":\"));\n  if (util.isEncryptedChannel(channel)) {\n    if (pusher.config.encryptionMasterKey === undefined) {\n      throw new Error(\"Cannot generate shared_secret because encryptionMasterKey is not set\");\n    }\n    result.shared_secret = Buffer.from(pusher.channelSharedSecret(channel)).toString(\"base64\");\n  }\n  return result;\n}\nexports.getSocketSignatureForUser = getSocketSignatureForUser;\nexports.getSocketSignature = getSocketSignature;","map":{"version":3,"names":["util","require","getSocketSignatureForUser","token","socketId","userData","serializedUserData","JSON","stringify","signature","sign","auth","key","user_data","getSocketSignature","pusher","channel","socketID","data","result","signatureData","serializedData","push","channel_data","join","isEncryptedChannel","config","encryptionMasterKey","undefined","Error","shared_secret","Buffer","from","channelSharedSecret","toString","exports"],"sources":["/workspace/messaging-app/app/node_modules/pusher/lib/auth.js"],"sourcesContent":["const util = require(\"./util\")\n\nfunction getSocketSignatureForUser(token, socketId, userData) {\n  const serializedUserData = JSON.stringify(userData)\n  const signature = token.sign(`${socketId}::user::${serializedUserData}`)\n  return {\n    auth: `${token.key}:${signature}`,\n    user_data: serializedUserData,\n  }\n}\n\nfunction getSocketSignature(pusher, token, channel, socketID, data) {\n  const result = {}\n\n  const signatureData = [socketID, channel]\n  if (data) {\n    const serializedData = JSON.stringify(data)\n    signatureData.push(serializedData)\n    result.channel_data = serializedData\n  }\n\n  result.auth = token.key + \":\" + token.sign(signatureData.join(\":\"))\n\n  if (util.isEncryptedChannel(channel)) {\n    if (pusher.config.encryptionMasterKey === undefined) {\n      throw new Error(\n        \"Cannot generate shared_secret because encryptionMasterKey is not set\"\n      )\n    }\n    result.shared_secret = Buffer.from(\n      pusher.channelSharedSecret(channel)\n    ).toString(\"base64\")\n  }\n\n  return result\n}\n\nexports.getSocketSignatureForUser = getSocketSignatureForUser\nexports.getSocketSignature = getSocketSignature\n"],"mappings":"AAAA,MAAMA,IAAI,GAAGC,OAAO,CAAC,QAAQ,CAAC;AAE9B,SAASC,yBAAyB,CAACC,KAAK,EAAEC,QAAQ,EAAEC,QAAQ,EAAE;EAC5D,MAAMC,kBAAkB,GAAGC,IAAI,CAACC,SAAS,CAACH,QAAQ,CAAC;EACnD,MAAMI,SAAS,GAAGN,KAAK,CAACO,IAAI,CAAE,GAAEN,QAAS,WAAUE,kBAAmB,EAAC,CAAC;EACxE,OAAO;IACLK,IAAI,EAAG,GAAER,KAAK,CAACS,GAAI,IAAGH,SAAU,EAAC;IACjCI,SAAS,EAAEP;EACb,CAAC;AACH;AAEA,SAASQ,kBAAkB,CAACC,MAAM,EAAEZ,KAAK,EAAEa,OAAO,EAAEC,QAAQ,EAAEC,IAAI,EAAE;EAClE,MAAMC,MAAM,GAAG,CAAC,CAAC;EAEjB,MAAMC,aAAa,GAAG,CAACH,QAAQ,EAAED,OAAO,CAAC;EACzC,IAAIE,IAAI,EAAE;IACR,MAAMG,cAAc,GAAGd,IAAI,CAACC,SAAS,CAACU,IAAI,CAAC;IAC3CE,aAAa,CAACE,IAAI,CAACD,cAAc,CAAC;IAClCF,MAAM,CAACI,YAAY,GAAGF,cAAc;EACtC;EAEAF,MAAM,CAACR,IAAI,GAAGR,KAAK,CAACS,GAAG,GAAG,GAAG,GAAGT,KAAK,CAACO,IAAI,CAACU,aAAa,CAACI,IAAI,CAAC,GAAG,CAAC,CAAC;EAEnE,IAAIxB,IAAI,CAACyB,kBAAkB,CAACT,OAAO,CAAC,EAAE;IACpC,IAAID,MAAM,CAACW,MAAM,CAACC,mBAAmB,KAAKC,SAAS,EAAE;MACnD,MAAM,IAAIC,KAAK,CACb,sEAAsE,CACvE;IACH;IACAV,MAAM,CAACW,aAAa,GAAGC,MAAM,CAACC,IAAI,CAChCjB,MAAM,CAACkB,mBAAmB,CAACjB,OAAO,CAAC,CACpC,CAACkB,QAAQ,CAAC,QAAQ,CAAC;EACtB;EAEA,OAAOf,MAAM;AACf;AAEAgB,OAAO,CAACjC,yBAAyB,GAAGA,yBAAyB;AAC7DiC,OAAO,CAACrB,kBAAkB,GAAGA,kBAAkB"},"metadata":{},"sourceType":"script","externalDependencies":[]}