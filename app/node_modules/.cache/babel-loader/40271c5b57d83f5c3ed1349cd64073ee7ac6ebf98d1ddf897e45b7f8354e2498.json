{"ast":null,"code":"const crypto = require(\"crypto\");\nfunction toOrderedArray(map) {\n  return Object.keys(map).map(function (key) {\n    return [key, map[key]];\n  }).sort(function (a, b) {\n    if (a[0] < b[0]) {\n      return -1;\n    }\n    if (a[0] > b[0]) {\n      return 1;\n    }\n    return 0;\n  }).map(function (pair) {\n    return pair[0] + \"=\" + pair[1];\n  });\n}\nfunction getMD5(body) {\n  return crypto.createHash(\"md5\").update(body, \"utf8\").digest(\"hex\");\n}\nfunction secureCompare(a, b) {\n  if (a.length !== b.length) {\n    return false;\n  }\n  let result = 0;\n  for (const i in a) {\n    result |= a.charCodeAt(i) ^ b.charCodeAt(i);\n  }\n  return result === 0;\n}\nfunction isEncryptedChannel(channel) {\n  return channel.startsWith(\"private-encrypted-\");\n}\nexports.toOrderedArray = toOrderedArray;\nexports.getMD5 = getMD5;\nexports.secureCompare = secureCompare;\nexports.isEncryptedChannel = isEncryptedChannel;","map":{"version":3,"names":["crypto","require","toOrderedArray","map","Object","keys","key","sort","a","b","pair","getMD5","body","createHash","update","digest","secureCompare","length","result","i","charCodeAt","isEncryptedChannel","channel","startsWith","exports"],"sources":["/workspace/messaging-app/app/node_modules/pusher/lib/util.js"],"sourcesContent":["const crypto = require(\"crypto\")\n\nfunction toOrderedArray(map) {\n  return Object.keys(map)\n    .map(function (key) {\n      return [key, map[key]]\n    })\n    .sort(function (a, b) {\n      if (a[0] < b[0]) {\n        return -1\n      }\n      if (a[0] > b[0]) {\n        return 1\n      }\n      return 0\n    })\n    .map(function (pair) {\n      return pair[0] + \"=\" + pair[1]\n    })\n}\n\nfunction getMD5(body) {\n  return crypto.createHash(\"md5\").update(body, \"utf8\").digest(\"hex\")\n}\n\nfunction secureCompare(a, b) {\n  if (a.length !== b.length) {\n    return false\n  }\n  let result = 0\n  for (const i in a) {\n    result |= a.charCodeAt(i) ^ b.charCodeAt(i)\n  }\n  return result === 0\n}\n\nfunction isEncryptedChannel(channel) {\n  return channel.startsWith(\"private-encrypted-\")\n}\n\nexports.toOrderedArray = toOrderedArray\nexports.getMD5 = getMD5\nexports.secureCompare = secureCompare\nexports.isEncryptedChannel = isEncryptedChannel\n"],"mappings":"AAAA,MAAMA,MAAM,GAAGC,OAAO,CAAC,QAAQ,CAAC;AAEhC,SAASC,cAAc,CAACC,GAAG,EAAE;EAC3B,OAAOC,MAAM,CAACC,IAAI,CAACF,GAAG,CAAC,CACpBA,GAAG,CAAC,UAAUG,GAAG,EAAE;IAClB,OAAO,CAACA,GAAG,EAAEH,GAAG,CAACG,GAAG,CAAC,CAAC;EACxB,CAAC,CAAC,CACDC,IAAI,CAAC,UAAUC,CAAC,EAAEC,CAAC,EAAE;IACpB,IAAID,CAAC,CAAC,CAAC,CAAC,GAAGC,CAAC,CAAC,CAAC,CAAC,EAAE;MACf,OAAO,CAAC,CAAC;IACX;IACA,IAAID,CAAC,CAAC,CAAC,CAAC,GAAGC,CAAC,CAAC,CAAC,CAAC,EAAE;MACf,OAAO,CAAC;IACV;IACA,OAAO,CAAC;EACV,CAAC,CAAC,CACDN,GAAG,CAAC,UAAUO,IAAI,EAAE;IACnB,OAAOA,IAAI,CAAC,CAAC,CAAC,GAAG,GAAG,GAAGA,IAAI,CAAC,CAAC,CAAC;EAChC,CAAC,CAAC;AACN;AAEA,SAASC,MAAM,CAACC,IAAI,EAAE;EACpB,OAAOZ,MAAM,CAACa,UAAU,CAAC,KAAK,CAAC,CAACC,MAAM,CAACF,IAAI,EAAE,MAAM,CAAC,CAACG,MAAM,CAAC,KAAK,CAAC;AACpE;AAEA,SAASC,aAAa,CAACR,CAAC,EAAEC,CAAC,EAAE;EAC3B,IAAID,CAAC,CAACS,MAAM,KAAKR,CAAC,CAACQ,MAAM,EAAE;IACzB,OAAO,KAAK;EACd;EACA,IAAIC,MAAM,GAAG,CAAC;EACd,KAAK,MAAMC,CAAC,IAAIX,CAAC,EAAE;IACjBU,MAAM,IAAIV,CAAC,CAACY,UAAU,CAACD,CAAC,CAAC,GAAGV,CAAC,CAACW,UAAU,CAACD,CAAC,CAAC;EAC7C;EACA,OAAOD,MAAM,KAAK,CAAC;AACrB;AAEA,SAASG,kBAAkB,CAACC,OAAO,EAAE;EACnC,OAAOA,OAAO,CAACC,UAAU,CAAC,oBAAoB,CAAC;AACjD;AAEAC,OAAO,CAACtB,cAAc,GAAGA,cAAc;AACvCsB,OAAO,CAACb,MAAM,GAAGA,MAAM;AACvBa,OAAO,CAACR,aAAa,GAAGA,aAAa;AACrCQ,OAAO,CAACH,kBAAkB,GAAGA,kBAAkB"},"metadata":{},"sourceType":"script","externalDependencies":[]}